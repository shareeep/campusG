services:
  # Kafka infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Fixed configuration for advertised listeners - allows connections from both inside Docker and from host
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  # Individual Databases for each microservice 
  user-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_service_db
    volumes:
      - user_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  order-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order_db
    volumes:
      - order_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  payment-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  notification-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notification_db
    volumes:
      - notification_db_data:/var/lib/postgresql/data
    ports:
      - "5437:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  create-order-saga-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: create_order_saga_db
    volumes:
      - create_order_saga_db_data:/var/lib/postgresql/data
    ports:
      - "5439:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  accept-order-saga-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: accept_order_saga_db
    volumes:
      - accept_order_saga_db_data:/var/lib/postgresql/data
    ports:
      - "5440:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  complete-order-saga-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: complete_order_saga_db
    volumes:
      - complete_order_saga_db_data:/var/lib/postgresql/data
    ports:
      - "5441:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Microservices
  user-service:
    build: 
      context: ./services/user-service
      dockerfile: Dockerfile
      args:
        - REBUILD=2  # Increment this to force rebuild
    environment:
      DATABASE_URL: postgresql://postgres:postgres@user-db:5432/user_service_db
      DB_HOST: user-db
      DB_PORT: 5432
      DB_NAME: user_service_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      PORT: 3000
    env_file:
      - ./.env
    depends_on:
      user-db:
        condition: service_healthy
      kafka: # Added dependency on Kafka being healthy
        condition: service_healthy
    ports:
      - "3001:3000"
    volumes:
      - ./services/user-service:/app
      - ./.env:/app/.env
    # Add healthcheck for the service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] # Changed from /api/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s # Increased start period

  order-service:
    build:
      context: ./services/order_service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@order-db:5432/order_db
      - FLASK_APP=run.py
      - FLASK_DEBUG=0  # Use this instead of FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-dev-key-please-change-in-production}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Added Kafka broker address
    depends_on:
      order-db:
        condition: service_healthy
      kafka: # Added dependency on Kafka being healthy
        condition: service_healthy
    ports:
      - "3002:3000"
    volumes: # Added volume mount for development
      - ./services/order_service:/app  # For development - mount code changes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s # Increased start period

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
      args:
        - REBUILD=2  # Increment to force rebuild
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@payment-db:5432/payment_db
      - FLASK_APP=run.py
      - FLASK_DEBUG=0  # Use this instead of FLASK_ENV=production
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Added Kafka broker address
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY} # Corrected variable name and referenced from .env
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY} # Added publishable key referenced from .env
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET} # Referenced from .env
    env_file:
      - ./.env
    depends_on:
      payment-db:
        condition: service_healthy
      kafka: # Added dependency on Kafka being healthy
        condition: service_healthy
    ports:
      - "3003:3000"
    # Removed volume mount to ensure the container uses the entrypoint.sh from the image build
    # volumes: 
    #   - ./services/payment-service:/app  
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] # Changed path to /health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s # Increased start period

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
      args:
        - REBUILD=2  # Incremented to force rebuild with our changes
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@notification-db:5432/notification_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENABLE_KAFKA_POLLING=true
      - KAFKA_POLL_INTERVAL_SECONDS=10
    volumes:
      - ./services/notification-service:/app  # Mount local code for development
    depends_on:
      notification-db:
        condition: service_healthy
      kafka: # Added dependency on Kafka being healthy
        condition: service_healthy
    ports:
      - "3006:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s # Increased start period

  # Saga Orchestrator Services
  create-order-saga-orchestrator:
    build:
      context: ./services/create-order-saga-orchestrator
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@create-order-saga-db:5432/create_order_saga_db
      - USER_SERVICE_URL=http://user-service:3000
      - ORDER_SERVICE_URL=http://order-service:3000
      - PAYMENT_SERVICE_URL=http://payment-service:3000
      - TIMER_SERVICE_URL=https://personal-7ndmvxwm.outsystemscloud.com/Timer_CS/rest/TimersAPI
      - NOTIFICATION_SERVICE_URL=http://notification-service:3000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - FLASK_APP=run.py
      - FLASK_DEBUG=0  # Use this instead of FLASK_ENV=production
    depends_on:
      create-order-saga-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_started
      order-service:
        condition: service_started
      payment-service:
        condition: service_started
      notification-service:
        condition: service_started
    ports:
      - "3101:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s # Increased start period

  accept-order-saga-orchestrator:
    build:
      context: ./services/accept-order-saga-orchestrator
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@accept-order-saga-db:5432/accept_order_saga_db
      - USER_SERVICE_URL=http://user-service:3000
      - ORDER_SERVICE_URL=http://order-service:3000
      - NOTIFICATION_SERVICE_URL=http://notification-service:3000
      - FLASK_APP=run.py
      - FLASK_DEBUG=0  # Use this instead of FLASK_ENV=production
    depends_on:
      accept-order-saga-db:
        condition: service_healthy
      user-service:
        condition: service_started
      order-service:
        condition: service_started
      notification-service:
        condition: service_started
    ports:
      - "3102:3000"

  complete-order-saga-orchestrator:
    build:
      context: ./services/complete-order-saga-orchestrator
      dockerfile: Dockerfile
    ports:
      - "3103:5000"
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - user-service:
        condition: service_started
      - order-service:
        condition: service_started
      - payment-service:
        condition: service_started
      - notification-service:
        condition: service_started

#   complete-order-saga-orchestrator:
#     build:
#       context: ./services/complete-order-saga-orchestrator
#     environment:
#       - DATABASE_URL=postgresql://postgres:postgres@complete-order-saga-db:5432/complete_order_saga_db
#       - USER_SERVICE_URL=http://user-service:3000
#       - ORDER_SERVICE_URL=http://order-service:3000
#       - PAYMENT_SERVICE_URL=http://payment-service:3000
#       - NOTIFICATION_SERVICE_URL=http://notification-service:3000
#       - TEMPORAL_HOST=temporal:7233  # NEW: Temporal Server URL
#       - FLASK_APP=run.py
#       - FLASK_DEBUG=0  # Use this instead of FLASK_ENV=production
#     depends_on:
#       complete-order-saga-db:
#         condition: service_healthy
#       user-service:
#         condition: service_started
#       order-service:
#         condition: service_started
#       payment-service:
#         condition: service_started
#       notification-service:
#         condition: service_started
#       # temporal:
#       #   condition: service_healthy  # NEW: Depend on Temporal
#     networks:
#       - temporal-network
#     ports:
#       - "3103:3000"
# networks:
#   temporal-network:
#     external: true  #

  # temporal:
  #   image: temporalio/auto-setup:latest
  #   environment:
  #     - DB=postgres12                   # Correcting the DB type
  #     - POSTGRES_USER=temporal
  #     - POSTGRES_PASSWORD=temporal
  #     - POSTGRES_SEEDS=temporal-postgres:5432  # This should be 5432 internally, NOT 5433
  #     - POSTGRES_DB=temporal            # Make sure the database name is specified
  #     - TEMPORAL_CLI_ADDRESS=temporal:7233
  #   depends_on:
  #     temporal-postgres:
  #       condition: service_healthy
  #   ports:
  #     - "7233:7233"

  # temporal-worker:
  #   build:
  #     context: ./services/temporal-worker
  #   environment:
  #     - TEMPORAL_HOST=temporal:7233
  #   depends_on:
  #     temporal:
  #       condition: service_healthy
  #   ports:
  #     - "3104:3000"

  # temporal-ui:
  #   image: temporalio/ui:latest
  #   environment:
  #     - TEMPORAL_ADDRESS=temporal:7233
  #   ports:
  #     - "8233:8233"
  #   depends_on:
  #     temporal:
  #       condition: service_healthy

  # temporal-postgres:
  #   image: postgres:12
  #   environment:
  #     POSTGRES_USER: temporal
  #     POSTGRES_PASSWORD: temporal
  #     POSTGRES_DB: temporal
  #   ports:
  #     - "5443:5432"
  #   volumes:
  #     - temporal_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "temporal"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
    
  # # Frontend
  # frontend:
  #   build:
  #     context: ./frontend
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - user-service
  #     - order-service
  #     - payment-service
  #     - scheduler-service
  #     - notification-service
  #     - timer-service

volumes:
  user_db_data:
  order_db_data:
  payment_db_data:
  notification_db_data:
  create_order_saga_db_data:
  accept_order_saga_db_data:
  complete_order_saga_db_data:
  temporal_data:
