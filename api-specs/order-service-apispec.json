{"definitions":{"Order":{"properties":{"accepted_at":{"format":"date-time","nullable":true,"type":"string"},"cancelled_at":{"format":"date-time","nullable":true,"type":"string"},"completed_at":{"format":"date-time","nullable":true,"type":"string"},"created_at":{"format":"date-time","type":"string"},"cust_id":{"type":"string"},"delivered_at":{"format":"date-time","nullable":true,"type":"string"},"delivery_fee":{"format":"float","type":"number"},"delivery_location":{"type":"string"},"food_fee":{"format":"float","type":"number"},"order_description":{"description":"JSON string of food items","type":"string"},"order_id":{"format":"uuid","type":"string"},"order_status":{"enum":["PENDING","CREATED","ACCEPTED","PLACED","ON_THE_WAY","DELIVERED","COMPLETED","CANCELLED"],"type":"string"},"picked_up_at":{"format":"date-time","nullable":true,"type":"string"},"placed_at":{"format":"date-time","nullable":true,"type":"string"},"runner_id":{"nullable":true,"type":"string"},"saga_id":{"format":"uuid","nullable":true,"type":"string"},"store_location":{"nullable":true,"type":"string"},"total_fee":{"format":"float","type":"number"},"updated_at":{"format":"date-time","type":"string"}},"type":"object"}},"info":{"description":"powered by Flasgger","termsOfService":"/tos","title":"A swagger API","version":"0.0.1"},"paths":{"/cancelAcceptance":{"post":{"consumes":["application/json"],"description":"Removes the assigned runner and reverts the order status (typically to CREATED). Publishes ORDER_ACCEPTANCE_CANCELLED Kafka event.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"orderId":{"format":"uuid","type":"string"}},"required":["orderId"],"type":"object"}}],"produces":["application/json"],"responses":{"200":{"description":"Order acceptance cancelled successfully.","schema":{"properties":{"message":{"type":"string"},"order":{"$ref":"#/definitions/Order"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing orderId, order not in ACCEPTED state)"},"404":{"description":"Order not found"},"500":{"description":"Internal Server Error"}},"summary":"Runner cancels acceptance of an order.","tags":["Orders"]}},"/cancelOrder":{"post":{"consumes":["application/json"],"description":"Cancels an order if its status allows (e.g., CREATED). Publishes ORDER_CANCELLED Kafka event.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"orderId":{"format":"uuid","type":"string"}},"required":["orderId"],"type":"object"}}],"produces":["application/json"],"responses":{"200":{"description":"Order cancelled successfully.","schema":{"properties":{"message":{"type":"string"},"order":{"$ref":"#/definitions/Order"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing orderId, order cannot be cancelled)"},"404":{"description":"Order not found"},"500":{"description":"Internal Server Error"}},"summary":"Cancel an order (direct API).","tags":["Orders"]}},"/clearRunner":{"post":{"consumes":["application/json"],"description":"Removes the assigned runner and reverts the order status (typically to CREATED). Publishes ORDER_RUNNER_CLEARED Kafka event. Used for compensation or admin actions.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"orderId":{"format":"uuid","type":"string"}},"required":["orderId"],"type":"object"}}],"produces":["application/json"],"responses":{"200":{"description":"Runner cleared successfully.","schema":{"properties":{"message":{"type":"string"},"order":{"$ref":"#/definitions/Order"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing orderId, order not in ACCEPTED state)"},"404":{"description":"Order not found"},"500":{"description":"Internal Server Error"}},"summary":"Clear the assigned runner from an order.","tags":["Orders"]}},"/completeOrder":{"post":{"consumes":["application/json"],"description":"Sets the order status to COMPLETED. Publishes ORDER_COMPLETED Kafka event.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"orderId":{"format":"uuid","type":"string"}},"required":["orderId"],"type":"object"}}],"produces":["application/json"],"responses":{"200":{"description":"Order completed successfully.","schema":{"properties":{"message":{"type":"string"},"order":{"$ref":"#/definitions/Order"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing orderId)"},"404":{"description":"Order not found"},"500":{"description":"Internal Server Error"}},"summary":"Mark an order as completed (direct API).","tags":["Orders"]}},"/createOrder":{"post":{"consumes":["application/json"],"description":"Creates an order directly via API. Publishes ORDER_CREATED Kafka event.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"customer_id":{"type":"string"},"order_details":{"properties":{"deliveryFee":{"description":"Delivery fee provided by caller (e.g., saga)","format":"float","type":"number"},"deliveryLocation":{"type":"string"},"foodItems":{"items":{"properties":{"name":{"type":"string"},"price":{"format":"float","type":"number"},"quantity":{"type":"integer"}},"type":"object"},"type":"array"},"storeLocation":{"nullable":true,"type":"string"}},"type":"object"}},"required":["customer_id","order_details"],"type":"object"}}],"produces":["application/json"],"responses":{"201":{"description":"Order created successfully.","schema":{"properties":{"message":{"type":"string"},"order_id":{"format":"uuid","type":"string"},"success":{"example":true,"type":"boolean"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing fields)"},"500":{"description":"Internal Server Error"}},"summary":"Create a new order (CRUD style).","tags":["Orders"]}},"/getOrderDetails":{"get":{"parameters":[{"description":"The UUID of the order to retrieve.","in":"query","name":"orderId","required":true,"type":"string"}],"responses":{"200":{"description":"Order details retrieved.","schema":{"$ref":"#/definitions/Order"}},"400":{"description":"Missing orderId parameter."},"404":{"description":"Order not found."},"500":{"description":"Internal Server Error"}},"summary":"Get details for a specific order by ID.","tags":["Orders"]}},"/health":{"get":{"responses":{"200":{"description":"Service is healthy.","schema":{"properties":{"status":{"example":"healthy","type":"string"}},"type":"object"}}},"summary":"Basic health check endpoint","tags":["Health"]}},"/orders":{"get":{"description":"Retrieves a list of orders, primarily for debugging. Supports pagination and filtering by status or runner ID.","parameters":[{"default":1,"description":"Page number for pagination.","in":"query","name":"page","type":"integer"},{"default":10,"description":"Number of items per page.","in":"query","name":"limit","type":"integer"},{"description":"Filter orders by status (e.g., ACCEPTED, PENDING). Case-insensitive.","enum":["PENDING","CREATED","ACCEPTED","PLACED","ON_THE_WAY","DELIVERED","COMPLETED","CANCELLED"],"in":"query","name":"status","required":false,"type":"string"},{"description":"Filter orders by assigned runner ID.","in":"query","name":"runnerId","required":false,"type":"string"}],"responses":{"200":{"description":"List of orders retrieved.","schema":{"properties":{"items":{"items":{"$ref":"#/definitions/Order"},"type":"array"},"page":{"type":"integer"},"pages":{"type":"integer"},"total":{"type":"integer"}},"type":"object"}},"400":{"description":"Invalid status value provided."},"500":{"description":"Internal Server Error"}},"summary":"Get all orders (paginated, filterable).","tags":["Orders"]}},"/orders/customer/{customer_id}":{"get":{"parameters":[{"description":"The ID of the customer whose orders to retrieve.","in":"path","name":"customer_id","required":true,"type":"string"},{"default":1,"description":"Page number for pagination.","in":"query","name":"page","type":"integer"},{"default":10,"description":"Number of items per page.","in":"query","name":"limit","type":"integer"}],"responses":{"200":{"description":"List of customer orders retrieved.","schema":{"properties":{"items":{"items":{"$ref":"#/definitions/Order"},"type":"array"},"page":{"type":"integer"},"pages":{"type":"integer"},"total":{"type":"integer"}},"type":"object"}},"500":{"description":"Internal Server Error"}},"summary":"Get all orders for a specific customer (paginated).","tags":["Orders"]}},"/testCreateOrder":{"post":{"consumes":["application/json"],"description":"Creates an order directly via API, intended for testing purposes. Does NOT publish a Kafka event.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"customer_id":{"type":"string"},"order_details":{"properties":{"deliveryLocation":{"type":"string"},"foodItems":{"items":{"properties":{"name":{"type":"string"},"price":{"format":"float","type":"number"},"quantity":{"type":"integer"}},"type":"object"},"type":"array"}},"type":"object"}},"required":["customer_id","order_details"],"type":"object"}}],"produces":["application/json"],"responses":{"201":{"description":"Test order created successfully.","schema":{"properties":{"message":{"type":"string"},"order_id":{"format":"uuid","type":"string"},"success":{"example":true,"type":"boolean"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing fields)"},"500":{"description":"Internal Server Error"}},"summary":"Create an order for testing (CRUD style, no Kafka event).","tags":["Orders","Testing"]}},"/updateOrderStatus":{"post":{"consumes":["application/json"],"description":"Updates the status of an existing order. Publishes ORDER_UPDATED Kafka event.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"orderId":{"format":"uuid","type":"string"},"status":{"enum":["PENDING","CREATED","ACCEPTED","PLACED","ON_THE_WAY","DELIVERED","COMPLETED","CANCELLED"],"type":"string"}},"required":["orderId","status"],"type":"object"}}],"produces":["application/json"],"responses":{"200":{"description":"Order status updated successfully.","schema":{"properties":{"message":{"type":"string"},"order":{"$ref":"#/definitions/Order"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing fields, invalid status)"},"404":{"description":"Order not found"},"500":{"description":"Internal Server Error"}},"summary":"Update an order's status (direct API).","tags":["Orders"]}},"/verifyAndAcceptOrder":{"post":{"consumes":["application/json"],"description":"Assigns a runner to an order and updates its status to ACCEPTED. Publishes ORDER_ACCEPTED Kafka event.","parameters":[{"in":"body","name":"body","required":true,"schema":{"properties":{"orderId":{"format":"uuid","type":"string"},"runner_id":{"type":"string"}},"required":["orderId","runner_id"],"type":"object"}}],"produces":["application/json"],"responses":{"200":{"description":"Order accepted successfully.","schema":{"properties":{"message":{"type":"string"},"order_id":{"format":"uuid","type":"string"},"success":{"example":true,"type":"boolean"}},"type":"object"}},"400":{"description":"Bad Request (e.g., missing fields, order cannot be accepted)"},"404":{"description":"Order not found"},"500":{"description":"Internal Server Error"}},"summary":"Runner accepts an order.","tags":["Orders"]}}},"swagger":"2.0"}
